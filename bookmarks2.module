<?php
// $Id$

/**
 * Bookmarks2
 * 
 * @file
 * Lets users keep bookmarks
 *
 * @author David Kent Norman
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 * @link http://deekayen.net/
 * @todo There's some code/functionality duplication to eliminate
 *       Callbacks are underutilized
 *       add option to submit key by SSL
 *       password reminder re-encryption if users enter their old key with a new key
 */

/**
 * Implementation of hook_help().
 */
function bookmarks2_help($path, $arg) {
  switch ($path) {
    case 'user/bookmarks2':
      return t('A bookmark is a link to an address (URL) on the internet.');
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function bookmarks2_menu() {
  $items['bookmarks2'] = array(
    'title' => 'My bookmarks',
    'page callback' => 'bookmarks2_page',
    'access arguments' => array('access bookmarks2'),
  );
  $items['bookmarks2/overview'] = array(
    'title' => t('List'),
    'access arguments' => array('access bookmarks2'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['bookmarks2/add'] = array(
    'title' => t('Add bookmark'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_form'),
    'access arguments' => array('access bookmarks2'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['bookmarks2/delete'] = array(
    'title' => t('Delete bookmark'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_delete_confirm'),
    'access arguments' => array('access bookmarks2'),
    'type' => MENU_CALLBACK,
  );
  $items['bookmarks2/folders'] = array(
    'title' => t('Folders'),
    'page callback' => 'bookmarks2_folder_overview',
    'access arguments' => array('access bookmarks2'),
    'weight' => 15,
    'type' => MENU_LOCAL_TASK,
  );
  $items['bookmarks2/folder/add'] = array(
    'title' => t('Add folder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_folder_form'),
    'access arguments' => array('access bookmarks2'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  $items['bookmarks2/folders/edit'] = array(
    'title' => t('Edit folder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_folder_form'),
    'access arguments' => array('access bookmarks2'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  $items['bookmarks2/folder/delete'] = array(
    'title' => t('Delete folder'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_folder_delete_confirm'),
    'access arguments' => array('access bookmarks2'),
    'type' => MENU_CALLBACK,
  );
  $items['bookmarks2/edit'] = array(
    'title' => t('Edit bookmark'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_form'),
    'access arguments' => array('access bookmarks2'),
    'type' => MENU_CALLBACK,
  );
  $items['bookmarks2/config'] = array(
    'title' => t('Preferences'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_bookmarks2_config'),
    'access arguments' => array('access bookmarks2'),
    'weight' => 25,
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['bookmarks2/%/rss.xml'] = array(
    'title' => t('feed'),
    'page callback' => 'bookmarks2_feed',
    'page arguments' => array(1),
    'access arguments' => array('access bookmarks2'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/bookmarks2'] = array(
    'title' => t('Bookmarks Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookmarks2_admin_settings'),
    'access arguments' => array('administer bookmarks2'),
    'description' => t('Change bookmarks settings.'),
  );
  
  return $items;
}

/**
 * Implementation of hook_block().
 */
function bookmarks2_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  
  if ($op == 'list') {
    $blocks[0] = array (
      'info' => t('User bookmarks'),
    );
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        if ($user->uid != 0 && user_access('access bookmarks2')) {
          $block = array(
            'subject' => t('My bookmarks'),
            'content' => bookmarks2_block_1(), 
          );
        }
        break;
    }
    return $block;
  }
}

/**
 * Returns an user's bookmarks block.
 */
function bookmarks2_block_1() {
  global $user;

  $result = db_query('SELECT b.url, b.title, b.description, b.options FROM {bookmarks2} b WHERE b.uid = %d ORDER BY b.title', $user->uid);
  $bookmarks = array();
  while ($data = db_fetch_object($result)) {
    $bookmarks[] = '<div class="icon">'. theme('bookmarks2_delete', $data->url) .'</div>'. _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, true);
  }

  $links = array(
    'bookmarks2_quick_link' => array(
      'title' => t('Quick link'),
      'href' => "bookmarks2/add/quick",
      'attributes' => array(
        'title' => t('Bookmark the current page.'),
        'class' => 'bookmarks2_link',
      ),
      'query' => 'title='. urlencode(drupal_get_title()),
    ),
    'bookmarks2_manage' => array(
      'title' => t('Manage'),
      'href' => 'bookmarks2',
      'attributes' => array(
        'title' => t('Manage your bookmarks.'),
        'class' => 'bookmarks2_link',
      ),
    ),
  );

  return theme('bookmarks2_block', $bookmarks, $links);
}

/**
 * Implementation of hook_perm().
 */
function bookmarks2_perm() {
  return array('administer bookmarks2', 'access bookmarks2');
}

/**
 * Implementation of hook_theme().
 */
function bookmarks2_theme($existing, $type, $theme, $path) {
  return array(
    'bookmarks2_block' => array(
      'arguments' => array(),
    ),
    'bookmarks2_delete' => array(
      'arguments' => array('url' => NULL),
    ),
  );
}

/**
 * Theme the block
 */
function theme_bookmarks2_block($items = array(), $links = array()) {
  $output = (count($items) ? theme('item_list', $items) : t('You have no bookmarks.'));
  $output .= '<div class="links">'. theme('links', $links) .'</div>';
  return $output;
}

/**
 * Returns a bookmarks delete icon.
 */
function theme_bookmarks2_delete($url) {
  $query = 'url='. urlencode($url);
  return l(theme('image', drupal_get_path('module', 'bookmarks2') .'/trash.gif', t('delete')), "bookmarks2/delete", array('query' => $query, 'html' => TRUE));
}

/**
 * The controller for managing bookmarks.  Callback happens via menu().
 *
 * @return string Completely themed HTML page.
 */
function bookmarks2_page() {
  global $user;

  // Generate overview
  $output = bookmarks2_overview();
  
  // Add rss functionality
  $feed_title = t("!user's bookmarks", array('!user' => $user->name));
  $feed_url = url('bookmarks2/'. $user->uid .'/rss.xml');
  drupal_set_html_head('<link rel="alternate" type="application/rss+xml" title="'. $feed_title .'" href="'. $feed_url .'" />');
  $output .= theme('feed_icon', $feed_url, $feed_title);

  return $output;
}

/**
 * Output a RSS feed
 */
function bookmarks2_feed() {
  global $user, $base_url;

  $result = db_query('SELECT b.url, b.title, b.description FROM {bookmarks2} b WHERE b.uid = %d', $user->uid);

  $title = variable_get('site_name', '');
  $link = $base_url;
  $description = t("%user's bookmarks", array('%user' => $user->name));

  while ($obj = db_fetch_object($result)) {
    if (!preg_match('@^\w+://.+@', $obj->url)) {
      $obj->url = implode('/', array($base_url, $obj->url));
    }
    $body .= format_rss_item($obj->title, $obj->url, $obj->description);
  }

  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<!DOCTYPE rss [<!ENTITY % HTMLlat1 PUBLIC \"-//W3C//ENTITIES Latin1 for XHTML//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\">]>\n";
  $output .= "<rss version=\"2.0\" xml:base=\"$base_url\">\n";
  $output .= format_rss_channel($title, $link, $description, $body);
  $output .= "</rss>\n";

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $output;
}

/**
 * Confirmation screen to make sure user really wants to delete their bookmark
 */
function bookmarks2_delete_confirm(&$form_state = null, $url = NULL, $uid = NULL) {
  if (!$url) {
    $url = check_plain($_GET['url']);
  }
  
  $form['url'] = array(
    '#type' => 'hidden',
    '#value' => $url,
  );
  return confirm_form($form, t('Are you sure you want to delete this bookmark?'), 'bookmarks2', NULL, t('Delete'));
}

/**
 * Actually deletes a bookmark after a confirmation on a previous screen
 *
 * @param string $form_id
 * @param array $form_values
 * @return string
 */
function bookmarks2_delete_confirm_submit($form, &$form_state) {
  global $user;
  
  db_query("DELETE FROM {bookmarks2} WHERE uid = %d AND url = '%s'", $user->uid, $form_state['values']['url']);
  drupal_set_message(t('Deleted bookmark.'));

  drupal_goto('bookmarks2');
}

/**
 * Menu callback; confirm deletion of folder.
 *
 * @todo name the folder in the question
 */
function bookmarks2_folder_delete_confirm(&$form_state, $fid = NULL) {
  if (!$fid) {
    $fid = (int) check_plain($_GET['fid']);
  }

  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );
  return confirm_form($form, t('Are you sure you want to delete this folder?'), 'bookmarks2/folders', NULL, t('Delete'));
}


/**
 * Delete a folder, all its children, and the associated bookmarks
 *
 * @param int $fid
 * @return string
 */
function bookmarks2_folder_delete_confirm_submit($form, &$form_state, $fid = 0, $child = false) {
//dprint_r($form_state);
  global $user;

  if ($child) {
    $result = db_query('SELECT f.fid FROM {bookmarks2_folders} f WHERE f.uid = %d AND f.fid = %d', $user->uid, $fid);
    while ($data = db_fetch_object($result)) {
      db_query('DELETE FROM {bookmarks2} WHERE uid = %d AND fid = %d', $user->uid, $data->fid);
      db_query('DELETE FROM {bookmarks2_folders} WHERE uid = %d AND fid = %d', $user->uid, $data->fid);
      bookmarks2_folder_delete_confirm_submit(NULL, NULL, $data->fid, true);
    }
  }
  else {
    if (!is_numeric($form_state['values']['fid'])) {
      drupal_set_message(t('Folder ID is not the correct format!', 'error'));
    }
    else {
      db_query('DELETE FROM {bookmarks2} WHERE uid = %d AND fid = %d', $user->uid, $form_state['values']['fid']);
      db_query('DELETE FROM {bookmarks2_folders} WHERE uid = %d AND fid = %d', $user->uid, $form_state['values']['fid']);
      drupal_set_message(t('Deleted bookmark folder.'));
    }

    drupal_goto('bookmarks2/folders');
  }
}

/**
 * Get a folder tree for the form select box
 */
function _bookmarks2_folder_select_options() {
  $folders = _bookmarks2_folder_child(true);
  if ($edit != NULL) {
    $current_name = $folders[$edit['fid']];
    $current_childs = array($edit['fid'] => $current_name);
    _bookmarks2_folder_child_loop($edit['fid'], $current_childs, (strpos($current_name, '>') / 2));
    $folders = array_diff_assoc($folders, $current_childs);
  }
  return $folders;
}

/**
 * Bookmark creation and update form
 */
function bookmarks2_form(&$form_state) {
  if (arg(2) == 'quick') {
    $edit = bookmarks2_load_quicklink();
  }
  if (arg(1) == 'edit' && is_string($_GET['url'])) {
    $edit = bookmarks2_load(check_plain($_GET['url']));
  }
  
  $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bookmark details')
  );
  $form['details']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $edit['title'],
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => null,
    '#attributes' => null,
    '#required' => true
  );
  $form['details']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => $edit['url'],
    '#size' => 60,
    '#maxlength' => 128,
    '#description' => t('Enter the address of the page you want to bookmark. This can be an internal or external reference.'),
    '#attributes' => null,
    '#required' => true
  );
  $form['details']['_blank'] = array(
    '#type' => 'checkbox',
    '#title' => t('Open bookmark clicks in a new window'),
    '#return_value' => 1,
    '#default_value' => $edit['options'] & 1
  );
  $form['details']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#rows' => 4,
    '#cols' => 68,
    '#description' => t('Optionally enter a description for this bookmark for reference later.'),
    '#required' => false
  );
  if (variable_get('bookmarks2_login_reminder_enabled', false) && _bookmarks2_crypt_ok()) {
    $form['details']['reminder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Login reminder'),
      '#collapsible' => true,
      '#collapsed' => true
    );
    $form['details']['reminder']['uname'] = array(
      '#type' => 'textfield',
      '#title' => t('Bookmark URL username'),
      '#default_value' => $edit['uname'],
      '#size' => 60,
      '#maxlength' => 80,
      '#description' => t('Username is stored in plaintext'),
      '#required' => false
    );
    if (_bookmarks2_key_isset()) {
      $form['details']['reminder']['pword'] = array(
        '#type' => 'password',
        '#title' => t('Bookmark URL password'),
        '#default_value' => '',
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('Password will be secured with 256-bit encryption when stored.'),
        '#required' => false
      );
      $form['details']['reminder']['key'] = array(
        '#type' => 'password',
        '#title' => t('Password locking key'),
        '#default_value' => '',
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => t('This key is used to secure your password reminder with 256-bit encryption. It was set in your bookmark preferences.'),
        '#required' => false
      );
    }
  }
  $form['details']['fid'] = array(
    '#type' => 'select',
    '#title' => t('Parent folder'),
    '#options' => _bookmarks2_folder_select_options(),
    '#default_value' => $edit['fid'],
    '#multiple' => false,
    '#required' => true
  );
  $form['old_url'] = array(
    '#type' => 'hidden',
    '#value' => urlencode($edit['url'])
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * Form validation
 */
function bookmarks2_form_validate($form, &$form_state) {
  if ((isset($form_state['values']['pword']) && $form_state['values']['pword'] == '') && (!isset($form_state['values']['key']) || !$form_state['values']['key'])) {
    form_set_error('pword', t('You must supply your bookmark reminder key to encrypt the password for your login reminder.'));
  }
  elseif ($form_state['values']['key'] && !_bookmarks2_check_key($form_state['values']['key'])) {
    form_set_error('key', t('The reminder key you supplied does not match the one on record.'));
  }
}

/**
 * Form submit handler
 */
function bookmarks2_form_submit($form, &$form_state) {
  global $user;

  $encrypted_pword = '';
  $options = 0;
  $options |= ($form_state['values']['_blank']) ? $form_state['values']['_blank'] : 0;

  if ($form_state['values']['pword'] && $form_state['values']['key']) {
    $encrypted_pword = _bookmarks2_encrypt_pword($form_state['values']['key'], $form_state['values']['pword']);
  }

  $form_state['values']['old_url'] = urldecode($form_state['values']['old_url']);
  if ($form_state['values']['old_url'] && db_result(db_query("SELECT COUNT(b.uid) FROM {bookmarks2} b WHERE b.uid = %d AND b.url = '%s'", $user->uid, $form_state['values']['old_url']))) {
    if (!$form_state['values']['pword'] && !$form_state['values']['key']) {
      $encrypted_pword = db_result(db_query("SELECT pword FROM {bookmarks2} b WHERE b.uid = %d AND b.url = '%s'", $user->uid, $form_state['values']['old_url']));
    }
    db_query("UPDATE {bookmarks2} SET fid = %d, title = '%s', url = '%s', description = '%s', uname = '%s', pword = '%s', options = %d WHERE uid = %d AND url = '%s'", $form_state['values']['fid'], $form_state['values']['title'], $form_state['values']['url'], $form_state['values']['description'], $form_state['values']['uname'], $encrypted_pword, $options, $user->uid, $form_state['values']['old_url']);
    drupal_set_message(t('The bookmark has been updated.'));
    drupal_goto('bookmarks2');
  }
  else {
    db_query("INSERT INTO {bookmarks2} (uid, fid, url, title, description, uname, pword, options) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d)", $user->uid, $form_state['values']['fid'], $form_state['values']['url'], $form_state['values']['title'], $form_state['values']['description'], $form_state['values']['uname'], $encrypted_pword, $options);
    drupal_set_message(t('The link has been added to your bookmarks.'));
  }
}

/**
 * Bookmark folder creation and update form
 */
function bookmarks2_folder_form($form_state) {
  if (arg(2) == 'edit' && is_numeric($_GET['fid'])) {
    $edit = _bookmarks2_folder_load(check_plain($_GET['fid']));
  }
  
  $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('Folder details')
  );
  $form['details']['fname'] = array(
    '#type' => 'textfield',
    '#title' => t('Folder name'),
    '#default_value' => $edit['fname'],
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => true
  );
  $form['details']['f_parent_id'] = array(
    '#type' => 'select',
    '#title' => t('Parent folder'),
    '#options' => _bookmarks2_folder_select_options(),
    '#default_value' => $edit['f_parent_id'],
    '#multiple' => false,
    '#required' => true
  );
  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $edit['fid']
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save folder'
  );

  return $form;
}

/**
 * Update or save a bookmark folder
 */
function bookmarks2_folder_form_submit($form, &$form_state) {
  global $user;

  if (db_result(db_query("SELECT COUNT(fid) FROM {bookmarks2_folders} WHERE fid = %d AND uid = %d", $form_state['values']['fid'], $user->uid))) {
    db_query("UPDATE {bookmarks2_folders} SET fname = '%s', f_parent_id = %d WHERE uid = %d AND fid = %d", $form_state['values']['fname'], $form_state['values']['f_parent_id'], $user->uid, $form_state['values']['fid']);
    drupal_set_message(t('The folder has been updated.'));
  }
  else {
    db_query("INSERT INTO {bookmarks2_folders} (uid, f_parent_id, fname) VALUES (%d, %d, '%s')", $user->uid, $form_state['values']['f_parent_id'], $form_state['values']['fname']);
    drupal_set_message(t('The folder has been added to your bookmarks.'));
  }
}

/**
 * Let individuals set preferences for bookmarks in the bookmark preferences tab
 */
function _bookmarks2_config() {
  $form['link_display'] = array(
    '#type' => 'radios',
    '#title' => t('Link display'),
    '#default_value' => _bookmarks2_user_pref('link_display', 0),
    '#options' => array(t('Title and link separate'), t('Title as link')),
    '#description' => t('Either show the bookmark name as a link, or the title with the URL as a separate link')
  );
  if (variable_get('bookmarks2_login_reminder_enabled', false) && _bookmarks2_crypt_ok()) {
    $form['details']['reminder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Login reminder'),
      '#collapsible' => true,
      '#collapsed' => true
    );
    $key_set = _bookmarks2_key_isset();
    $form['details']['reminder']['key'] = array(
      '#type' => 'password',
      '#title' => t('Password lock/unlock key'),
      '#default_value' => '',
      '#size' => 60,
      '#maxlength' => 255,
      '#description' => t('The key is currently <em style="color: %color">%set</em>. ', array('%set' => $key_set ? t('set') : t('not set'), '%color' => $key_set ? 'green' : 'red')) .
                        t('This key will be scrambled with 256-bit, one-way encryption and will be needed to lock and unlock your password reminders. If you submit a new key when one is already set, all your password reminders <strong>will be deleted</strong> because the new key will not be a valid verification for decrypting your stored passwords.'),
      '#required' => false
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save preferences'
  );

  return $form;
}

/**
 * Grabs a user's preferences for bookmarks from the database
 */
function _bookmarks2_user_pref($var, $default) {
  static $options;

  if (!isset($options)) {
    $options = db_result(db_query("SELECT options FROM {bookmarks2_prefs} WHERE uid = %d", $GLOBALS['user']->uid));
  }
  $definitions = array(
    'link_display' => 1 // display link title as link
  );
  return $options ? $options & $definitions[$var] : $default;
}

/**
 * Write prefs to db
 */
function _bookmarks2_config_submit($form, &$form_state) {
  global $user;

  $options = 0;
  $options |= $form_state['values']['link_display'];
  $key = false;
  $existing_key = _bookmarks2_fetch_key();

  if ($existing_key && empty($form_state['values']['key'])) {
    $key = $existing_key;
  }
  elseif (!empty($form_state['values']['key'])) {
    $key = _bookmarks2_hash_key($form_state['values']['key']);
    db_query("UPDATE {bookmarks2} SET pword = '' WHERE uid = %d", $user->uid);
  }

  if ($key) {
    db_query("REPLACE INTO {bookmarks2_prefs} (uid, options, pword_key) VALUES (%d, %d, '%s')", $user->uid, $options, $key);
  }
  else {
    db_query("REPLACE INTO {bookmarks2_prefs} (uid, options) VALUES (%d, %d)", $user->uid, $options);
  }
  drupal_set_message(t('Bookmark preferences have been updated.'));
}

/**
 * Grab the bookmarks for a user from the database
 *
 * @param string $url
 * @return array
 */
function bookmarks2_load($url) {
  global $user;
  return db_fetch_array(db_query("SELECT * FROM {bookmarks2} WHERE uid = %d AND url = '%s'", $user->uid, $url));
}

/**
 * Grab the name of a bookmark's folder for a user from the database
 *
 * @param int $fid Folder id
 * @return array
 */
function _bookmarks2_folder_load($fid) {
  global $user;
  return db_fetch_array(db_query("SELECT * FROM {bookmarks2_folders} WHERE uid = %d AND fid = %d", $user->uid, $fid));
}

/**
 *
 *
 * @return array
 */
function bookmarks2_load_quicklink() {

  $edit['url'] = bookmarks2_get_canonical_path($url);
  $explicit_uri = drupal_get_normal_path($edit['url']);

  $uri_ary = explode('/', $explicit_uri);
  $type = $uri_ary[0];
  foreach ($uri_ary as $value) {
    if (is_numeric($value)) {
      $id = $value;
      break;
    }
  }

  /* Only display quicklink title for internal URLs */
  if (is_numeric($id) && !strstr($edit['url'], 'http://')) {
    switch ($type) {
      case 'node':
        $edit['title'] = db_result(db_query('SELECT title FROM {node} n WHERE nid = %d', $id));
        break;
      case 'comment':
        $edit['title'] = db_result(db_query('SELECT subject FROM {comments} WHERE cid = %d', $id));
        break;
      case 'user':
        $edit['title'] = db_result(db_query('SELECT name FROM {users} WHERE uid = %d', $id));
        break;
      default:
        /* Leave the title blank. The user will be prompted to enter a title. */
    }
  }

  if (!$edit['title']) {
    $edit['title'] = urldecode($_GET['title']);
  }

  return $edit;
}

/**
 * Main bookmark list
 *
 * @return string
 */
function bookmarks2_overview() {
  global $user;
  $key = isset($_POST['overview_key']) ? $_POST['overview_key'] : '';

  $crypt_ok = _bookmarks2_crypt_ok() && variable_get('bookmarks2_login_reminder_enabled', 0);
  $good_key = _bookmarks2_check_key($key);
  if ($key && !$good_key) {
    drupal_set_message(t('Password reminder key incorrect! Password reminders will not be shown.'), 'error');
  }
  $link_display = _bookmarks2_user_pref('link_display', 0);

  
  
  $header[] = array('data' => t('title'), 'field' => 'title', 'sort' => 'asc');
  if (!$link_display) {
    $header[] = array('data' => t('link'), 'field' => 'url');
  }
  if ($crypt_ok) {
/*
    $form['key_holder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Reveal password reminders'),
      '#collapsible' => true, '#collapsed' => true
    );
    $form['key_holder']['key'] = array(
      '#type' => 'password',
      '#size' => 20,
      '#description' => t('Enter your password reminder key to decrypt and reveal your saved passwords')
    );
    $form['key_holder']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Display password reminders')
    );
    $output .= drupal_get_form('bookmarks2_key', $form);
    //die(var_dump($_POST)); // outputs an empty array after a form submission
 */
    // this is the output of the above $form since drupal_get_form is making $key disappear in a HTTP redirect or something
    if (_bookmarks2_key_isset()) {
      $output .= '<form action="" method="post" id="bookmarks2_key">
<div><fieldset class=" collapsible"><legend>'. t('Reveal password reminders') .'</legend><div class="form-item">
 <input type="password" maxlength="" name="overview_key" id="edit-key"  size="20"  class="form-text" />
 <div class="description">'. t('Enter your password reminder key to decrypt and reveal your saved passwords') .'</div>
</div><input type="submit" name="op" value="'. t('Display password reminders') .'" class="form-submit" />
</fieldset></div></form>';
    }
    
    $header[] = array('data' => t('username'), 'field' => 'uname');
    $header[] = array('data' => t('password'), 'field' => 'pword');
    if ($good_key) {
      drupal_set_header('Pragma: no-cache');
      drupal_set_header('Cache-Control: no-cache');
      drupal_set_html_head('<meta http-equiv="Pragma" content="no-cache" /><meta http-equiv="Expires" content="-1" /><meta http-equiv="Cache-Control" content="no-cache" />');
    }
  }
  $header[] = array('data' => t('operations'), 'colspan' => 2);

  $result = db_query('SELECT b.url, b.title, b.description, b.uname, b.pword, b.options FROM {bookmarks2} b 
                        WHERE b.uid = %d AND b.fid = 0'. tablesort_sql($header), $user->uid);

  $rows = array();
  while ($data = db_fetch_object($result)) {
    if ($crypt_ok) {
      if (empty($data->pword)) {
        $decrypted_pword = '';
      }
      elseif ($good_key) {
        $decrypted_pword = _bookmarks2_decrypt_pword($key, $data->pword);
      }
      else {
        $decrypted_pword = '<em>'. t('hidden') .'</em>';
      }
      
      if ($link_display) {
        $rows[] = array(
          _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
          $data->uname,
          $decrypted_pword,
          l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
          l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
        );
      }
      else {
        $rows[] = array(
          $data->title,
          _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
          $data->uname,
          $decrypted_pword,
          l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
          l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
        );
      }
      
    }
    else {
    
      if ($link_display) {
        $rows[] = array(
          _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
          l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
          l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url))),
        );
      }
      else {
        $rows[] = array(
          $data->title,
          _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
          l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
          l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url))),
        );
      }
      
    }
  }

  $output .= drupal_get_form('_bookmarks2_overview_folders', $link_display, 0, $key, $crypt_ok, $good_key);
  $output .= (count($rows) == 0) ? t('You have no bookmarks.') : theme('table', $header, $rows);
  return $output;
}

/**
 * List the folders a user has created for their bookmarks
 *
 * @todo do something about ugly code duplication from bookmarks2_overview()
 * @see bookmarks2_overview()
 * @param bool $link_display
 * @param int $fid
 * @return string
 */
function _bookmarks2_overview_folders($form_state, $link_display, $fid = 0, $key = '', $crypt_ok = false, $good_key = false) {
  global $user;

  $form = array();
  // having all these queries probably isn't the most efficient way of doing this
  $f_result = db_query('SELECT f.fid, f.fname FROM {bookmarks2_folders} f WHERE f.f_parent_id = %d AND f.uid = %d ORDER BY f.fname', $fid, $user->uid);
  while ($folder_data = db_fetch_object($f_result)) {
    if (!isset($form[$folder_data->fid])) {
      $form[$folder_data->fid] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($folder_data->fname),
        '#collapsible' => true,
        '#collapsed' => true
      );
    }
    if ($child = drupal_get_form('_bookmarks2_overview_folders', $link_display, $folder_data->fid, $key, $crypt_ok, $good_key)) {
      $form[$folder_data->fid]['child'] = array(
        '#value' => $child
      );
    }

    $header = array();
    $header[] = array('data' => t('title'), 'field' => 'title', 'sort' => 'asc');
    if (!$link_display) {
      $header[] = array('data' => t('link'), 'field' => 'url');
    }
    if ($crypt_ok) {
      $header[] = array('data' => t('username'), 'field' => 'uname');
      $header[] = array('data' => t('password'), 'field' => 'pword');
    }
    $header[] = array('data' => t('operations'), 'colspan' => 2);
    if ($bm_result = db_query('SELECT b.url, b.title, b.description, b.uname, b.pword, b.options FROM {bookmarks2} b WHERE b.uid = %d AND b.fid = %d '. tablesort_sql($header), $user->uid, $folder_data->fid)) {

      $rows = array();

      while ($data = db_fetch_object($bm_result)) {
        if ($crypt_ok) {
          if (empty($data->pword)) {
            $decrypted_pword = '';
          }
          elseif ($good_key) {
            $decrypted_pword = _bookmarks2_decrypt_pword($key, $data->pword);
          }
          else {
            $decrypted_pword = '<em>'. t('hidden') .'</em>';
          }
          if ($link_display) {
            $rows[] = array(
              _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
              $data->uname,
              $decrypted_pword,
              l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
              l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
            );
          }
          else {
            $rows[] = array(
              $data->title,
              _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
              $data->uname,
              $decrypted_pword,
              l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
              l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
            );
          }
        }
        else {
          if ($link_display) {
            $rows[] = array(
              _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
              l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
              l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
            );
          }
          else {
            $rows[] = array(
              $data->title,
              _bookmarks2_get_link($data->url, $data->title, $data->description, $data->options, $link_display),
              l(t('edit'), "bookmarks2/edit", array('query' => 'url='. urlencode($data->url))),
              l(t('delete'), "bookmarks2/delete", array('query' => 'url='. urlencode($data->url)))
            );
          }
        }
      }
      $form[$folder_data->fid][$data->url] = array(
        '#value' => theme('table', $header, $rows)
      );
    }
  }
  return $form;
}

/**
 * List folders bookmarks can be stored in
 *
 * @return string
 */
function bookmarks2_folder_overview() {
  global $user;

  $header = array(
    array('data' => t('Name')),
    array('data' => t('Operations'), 'colspan' => 2),
  );

  $folders = _bookmarks2_folder_child();

  while (list($key, $value) = each($folders)) {
    $fname = (strlen($value) > 50) ? substr($value, 0, 47) .'...' : $value;
    $rows[] = array(
      $value,
      l(t('edit'), 'bookmarks2/folders/edit', array('query' => 'fid='. $key)),
      l(t('delete'), 'bookmarks2/folder/delete', array('query' => 'fid='. $key)));
  }

  $output .= !count($rows) ? t('You have no folders.') : theme('table', $header, $rows);
  return $output;
}

/**
 * Pull hierarchy of folders from the database
 *
 * @param bool $inc_top
 * @return array
 */
function _bookmarks2_folder_child($inc_top = false) {
  global $user;

  $folder_tree = $inc_top == true ? array(0 => '['. t('Top level') .']') : array();

  $result = db_query('SELECT f.fid, f.fname FROM {bookmarks2_folders} f WHERE f.f_parent_id = 0 AND f.uid = %d ORDER BY f.fname', $user->uid);
  while ($data = db_fetch_object($result)) {
    if ($_GET['fid'] != $data->fid) {
      $folder_tree[$data->fid] = $data->fname;
      _bookmarks2_folder_child_loop($data->fid, $folder_tree, 0);
    }
  }
  return $folder_tree;
}

/**
 * Recursive loop to grab layers of folders under the top level
 *
 * @param int $fid
 * @param array $folder_array
 * @param int $i
 */
function _bookmarks2_folder_child_loop($fid, &$folder_array, $i) {
  global $user;

  $i++; // should this be static?
  $result = db_query('SELECT f.fid, f.fname FROM {bookmarks2_folders} f WHERE f.f_parent_id = %d AND f.uid = %d ORDER BY f.fname', $fid, $user->uid);
  while ($data = db_fetch_object($result)) {
    $folder_array[$data->fid] = str_repeat('-', 2*$i) .' '. $data->fname;
    if ($data->fid != $fid) {
      _bookmarks2_folder_child_loop($data->fid, $folder_array, $i);
    }
  }
}

/**
 * Updates or saves bookmarks
 *
 * @param array $edit
 */
function bookmarks2_save($edit) {
  global $user;

  $encrypted_pword = '';
  $options = 0;
  $options |= ($edit['_blank']) ? $edit['_blank'] : 0;

  if ($edit['pword'] && $edit['key']) {
    $encrypted_pword = _bookmarks2_encrypt_pword($edit['key'], $edit['pword']);
  }

  $edit['old_url'] = urldecode($edit['old_url']);
  if ($edit['old_url'] && db_result(db_query("SELECT COUNT(b.uid) FROM {bookmarks2} b WHERE b.uid = %d AND b.url = '%s'", $user->uid, $edit['old_url']))) {
    if (!$edit['pword'] && !$edit['key']) {
      $encrypted_pword = db_result(db_query("SELECT pword FROM {bookmarks2} b WHERE b.uid = %d AND b.url = '%s'", $user->uid, $edit['old_url']));
    }
    db_query("UPDATE {bookmarks2} SET fid = %d, title = '%s', url = '%s', description = '%s', uname = '%s', pword = '%s', options = %d WHERE uid = %d AND url = '%s'", $edit['fid'], $edit['title'], $edit['url'], $edit['description'], $edit['uname'], $encrypted_pword, $options, $user->uid, $edit['old_url']);
    drupal_set_message(t('The bookmark has been updated.'));
  }
  else {
    db_query("INSERT INTO {bookmarks2} (uid, fid, url, title, description, uname, pword, options) VALUES (%d, %d, '%s', '%s', '%s', '%s', '%s', %d)", $user->uid, $edit['fid'], $edit['url'], $edit['title'], $edit['description'], $edit['uname'], $encrypted_pword, $options);
    drupal_set_message(t('The link has been added to your bookmarks.'));
  }
}

/**
 * Administration settings to turn on password reminder or not
 *
 * @return array
 */
function bookmarks2_admin_settings() {
  $form['bookmarks2_link_crop_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Link crop length'),
    '#description' => t('The display of links will be cropped to this length in characters.'),
    '#size' => 5,
    '#maxlength' => 5,
    '#default_value' => variable_get('bookmarks2_link_crop_size', 50)
  );
  if (_bookmarks2_crypt_ok()) {
    $form['bookmarks2_login_reminder_enabled'] = array(
      '#type' => 'radios',
      '#title' => t('Enable login reminder support'),
      '#options' => array(t('No'), t('Yes')),
      '#default_value' => variable_get('bookmarks2_login_reminder_enabled', '0'),
      '#description' => t('Gives users the option to store a username and password reminder for each bookmark. The password gets stored with strong encryption when the user correctly enters their password reminder key. Administrators are not able to read or recover the password or encryption key.')
    );
  }
  else {
    $form['bookmarks2_login_reminder'] = array('#type' => 'markup', '#value' => t('The mcrypt extension of PHP must be installed on this server for login reminders to work.'));
    $form['bookmarks2_login_reminder_enabled'] = array('#type' => 'hidden', '#value' => '0');
  }

  return system_settings_form($form);
}

/**
 * Return a relative URI that Drupal can recognize internally.
 *
 * @return string
 */
function bookmarks2_get_canonical_path($url) {
  global $base_url;

  $c_path = ltrim(str_replace($base_url, '', trim(referer_uri(), '/')), '/');
  $c_path = str_replace('index.php', '', $c_path);
  $c_path = str_replace('?q=', '', $c_path);

  return $c_path;
}

/**
 * Generate a link based on the URL being internal or external
 *
 * @return string
 */
function _bookmarks2_get_link($url, $title, $description, $options, $link_display = false) {
  $crop = variable_get('bookmarks2_link_crop_size', 50);
  if ($link_display) {
    $title = (strlen($title) > $crop) ? substr($title, 0, $crop - 3) .'...' : check_plain($title);
  }
  else {
    $title = (strlen($url) > $crop) ? substr($url, 0, $crop - 3) .'...' : check_plain($url);
  }
  return (preg_match("!^[a-zA-Z]+://!", $url)) ? "<a href=\"$url\" title=\"". check_plain($description) .'"'. ($options & 1 ? ' target="_blank"' : '') ."\">$title</a>" : l($title, $url, ($options & 1 ? array('target' => '_blank') : array()), null, null, true);
}

/**
 * Check if mcrypt extension is installed and supports AES-256
 *
 * @return bool
 */
function _bookmarks2_crypt_ok() {
  return function_exists('mhash') && defined('MHASH_SHA256') && function_exists('mcrypt_encrypt') && defined('MCRYPT_RIJNDAEL_256');
}

/**
 * Check to see if the key is already stored
 *
 * @return string
 */
function _bookmarks2_key_isset() {
  global $user;
  return db_result(db_query('SELECT COUNT(pword_key) FROM {bookmarks2_prefs} WHERE uid = %d AND pword_key IS NOT NULL', $user->uid));
}

/**
 * Get existing key
 *
 * @return string binary hash
 */
function _bookmarks2_fetch_key() {
  global $user;
  return db_result(db_query('SELECT pword_key FROM {bookmarks2_prefs} WHERE uid = %d', $user->uid));
}

/**
 * encrypt password with AES-256
 *
 * @param string $key secret
 * @param string $pword to encrypt
 * @return string
 */
function _bookmarks2_encrypt_pword($key, $pword) {
  return mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $pword, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND));
}

/**
 * decrypt password
 *
 * @param string $key secret
 * @param string $pword to decrypt
 * @return string
 */
function _bookmarks2_decrypt_pword($key, $encrypted_pword) {
  return rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted_pword, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND)), "\0");
}

/**
 * hash key with SHA-256
 *
 * @param string $key secret
 * @return string
 */
function _bookmarks2_hash_key($key) {
  return mhash(MHASH_SHA256, $key);
}

/**
 * Check to see if the key from a form submission matches the stored key
 *
 * @param string $key
 * @return bool true when the key is valid
 */
function _bookmarks2_check_key($key) {
  return strcmp(_bookmarks2_fetch_key(), _bookmarks2_hash_key($key)) === 0;
}